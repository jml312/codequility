generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  username      String         @unique
  email         String         @unique
  title         String?
  bio           String?
  profilePic    String
  location      String?
  company       String?
  website       String?
  github        String
  linkedin      String?
  twitter       String?
  projects      Project[]
  posts         Post[]
  languages     Language[]
  views         View[]
  conversations Conversation[]
  likes         Like[]
  comments      Comment[]
  followers     Follower[]
  following     Following[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  body      String    @db.Text
  User      User      @relation(fields: [userId], references: [id])
  userId    Int
  comments  Comment[]
  createdAt DateTime  @default(now())

  @@index([userId])
}

enum LanguageType {
  FRAMEWORK
  LIBRARY
  LANGUAGE
  DATABASE
  PLATFORM
  TOOL
  OTHER
}

model Language {
  id        Int          @id @default(autoincrement())
  name      String
  type      LanguageType
  users     User[]
  projects  Project[]
  snippets  Snippet[]
  createdAt DateTime     @default(now())
}

model View {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  Project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  createdAt DateTime @default(now())

  @@index([userId, projectId])
}

model Message {
  id             Int          @id @default(autoincrement())
  text           String       @db.Text
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  createdAt      DateTime     @default(now())

  @@index([conversationId])
}

model Conversation {
  id               Int       @id @default(autoincrement())
  messages         Message[]
  withUserId       Int
  withUserUsername String
  User             User      @relation(fields: [userId], references: [id])
  userId           Int
  createdAt        DateTime  @default(now())

  @@index([userId])
}

enum LikeType {
  PROJECT
  COMMENT
}

model Like {
  id        Int      @id @default(autoincrement())
  type      LikeType
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  Project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  createdAt DateTime @default(now())

  @@index([userId, projectId])
}

enum CommentType {
  PROJECT
  POST
}

model Comment {
  id        Int         @id @default(autoincrement())
  text      String      @db.Text
  type      CommentType
  User      User        @relation(fields: [userId], references: [id])
  userId    Int
  Project   Project?    @relation(fields: [projectId], references: [id])
  projectId Int?
  Post      Post?       @relation(fields: [postId], references: [id])
  postId    Int?
  threadId  Int
  createdAt DateTime    @default(now())

  @@index([userId, projectId, postId])
}

model Follower {
  id               Int      @id @default(autoincrement())
  User             User     @relation(fields: [userId], references: [id])
  userId           Int
  followerId       Int
  followerUsername String
  createdAt        DateTime @default(now())

  @@index([userId])
}

model Following {
  id                Int      @id @default(autoincrement())
  User              User     @relation(fields: [userId], references: [id])
  userId            Int
  followingId       Int
  followingUsername String
  createdAt         DateTime @default(now())

  @@index([userId])
}

enum NotificationType {
  LIKE
  COMMENT
  MESSAGE
  FOLLOW
}

model Notification {
  id               Int              @id @default(autoincrement())
  type             NotificationType
  notifierId       Int
  notifierUsername String
  projectId        Int?
  conversationId   Int?
  User             User             @relation(fields: [userId], references: [id])
  userId           Int
  createdAt        DateTime         @default(now())

  @@index([userId])
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  description  String        @db.Text
  website      String?
  github       String
  logo         String?
  colors       Color[]
  tags         Tag[]
  languages    Language[]
  views        View[]
  likes        Like[]
  comments     Comment[]
  isCompleted  Boolean       @default(false)
  isPrivate    Boolean       @default(false)
  quickLinks   QuickLink[]
  tasks        Task[]
  issues       Issue[]
  references   Reference[]
  designs      Design[]
  snippets     Snippet[]
  inspirations Inspiration[]
  features     Feature[]
  services     Service[]
  insights     Insight[]
  User         User          @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime      @default(now())

  @@index([userId])
}

model Color {
  id        Int     @id @default(autoincrement())
  color     String
  isPrimary Boolean @default(false)
  Project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  @@index([projectId])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  projects  Project[]
  createdAt DateTime  @default(now())
}

model QuickLink {
  id        Int     @id @default(autoincrement())
  title     String
  url       String
  Project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  @@index([projectId])
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

model Task {
  id                  Int            @id @default(autoincrement())
  title               String
  description         String
  difficulty          TaskDifficulty
  estimatedCompletion DateTime?
  isCompleted         Boolean        @default(false)
  Project             Project        @relation(fields: [projectId], references: [id])
  projectId           Int
  createdAt           DateTime       @default(now())

  @@index([projectId])
}

enum IssueLevel {
  EASY
  MEDIUM
  HARD
}

model Issue {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  level       IssueLevel
  Project     Project    @relation(fields: [projectId], references: [id])
  projectId   Int
  createdAt   DateTime   @default(now())

  @@index([projectId])
}

enum ReferenceType {
  ARTICLE
  DOCUMENTATION
  VIDEO
  API
  OTHER
}

model Reference {
  id          Int           @id @default(autoincrement())
  title       String
  url         String
  type        ReferenceType
  description String
  Project     Project       @relation(fields: [projectId], references: [id])
  projectId   Int
  createdAt   DateTime      @default(now())

  @@index([projectId])
}

enum DesignType {
  WIREFRAME
  MOCKUP
  PROTOTYPE
  ASSET
  USER_FLOW
  OTHER
}

model Design {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  fileUrl     String
  type        DesignType
  Project     Project    @relation(fields: [projectId], references: [id])
  projectId   Int
  createdAt   DateTime   @default(now())

  @@index([projectId])
}

model Snippet {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  language    Language @relation(fields: [languageId], references: [id])
  code        String
  Project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  languageId  Int
  createdAt   DateTime @default(now())

  @@index([projectId, languageId])
}

model Inspiration {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  notes     String
  Project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  createdAt DateTime @default(now())

  @@index([projectId])
}

model Feature {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  Project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  createdAt   DateTime @default(now())

  @@index([projectId])
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String
  url         String
  description String
  costs       Cost[]
  Project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  createdAt   DateTime @default(now())

  @@index([projectId])
}

model Cost {
  id              Int       @id @default(autoincrement())
  description     String
  rate            String?
  priceOrEstimate Float?
  pricingUrl      String?
  expiration      DateTime?
  Service         Service   @relation(fields: [serviceId], references: [id])
  serviceId       Int
  createdAt       DateTime  @default(now())

  @@index([serviceId])
}

model Insight {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text
  Project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  createdAt   DateTime @default(now())

  @@index([projectId])
}
